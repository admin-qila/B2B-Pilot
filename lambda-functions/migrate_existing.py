#!/usr/bin/env python3
"""
Migration helper script to move existing synchronous processing logic
to the new async Lambda architecture
"""
import os
import re
import shutil

def extract_processing_functions():
    """Extract processing functions from existing app.py"""
    print("üîç Analyzing existing app.py for processing logic...")
    
    with open('../app.py', 'r') as f:
        content = f.read()
    
    # Find key functions to migrate
    functions_to_extract = [
        'handle_image_analysis',
        'handle_text_analysis', 
        'classify_text_intent',
        'check_user_consent',
        'check_usage_limits',
        'format_analysis_result'
    ]
    
    extracted = {}
    for func_name in functions_to_extract:
        # Simple regex to find function definitions
        pattern = rf'def {func_name}\([^)]*\):[^:]*?(?=\ndef|\Z)'
        match = re.search(pattern, content, re.DOTALL)
        if match:
            extracted[func_name] = match.group(0)
            print(f"‚úÖ Found {func_name}")
        else:
            print(f"‚ùå Could not find {func_name}")
    
    return extracted

def create_migration_template():
    """Create a template file with placeholders for existing logic"""
    template = '''"""
Background processor with migrated logic from synchronous app
Generated by migration script - please review and update
"""
import json
import boto3
import logging
import os
import sys
import time
from datetime import datetime

# Add shared module to path
sys.path.append('/opt/python')
from config import (
    TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN, TWILIO_PHONE_NUMBER,
    SUPABASE_URL, SUPABASE_KEY, logger
)
from twilio_utils import get_twilio_client, send_whatsapp_message

# Import your existing modules
# TODO: Update these imports based on your project structure
# from model.predictor import predict_response, parse_prediction_result
# from database.models import get_db, UserSubmission
# from s3_service import get_s3_service

# Initialize clients
sqs = boto3.client('sqs')
s3 = boto3.client('s3')

def lambda_handler(event, context):
    """Main Lambda handler - keep this as-is from the template"""
    # ... existing lambda_handler code ...
    pass

def process_whatsapp_message(message_data, twilio_client, context):
    """Process a single WhatsApp message"""
    try:
        # Extract message details
        from_number = message_data.get('from', '')
        text_body = message_data.get('body', '').strip()
        num_media = message_data.get('numMedia', 0)
        media_urls = message_data.get('mediaUrls', [])
        
        # TODO: Initialize your database connection here
        # db = get_db()
        
        # Check user consent
        phone_number = from_number.replace('whatsapp:', '')
        # TODO: Uncomment and update
        # if not check_user_consent(phone_number):
        #     message = "Please accept our terms at https://qilafy.com/legal"
        #     send_whatsapp_message(twilio_client, from_number, TWILIO_PHONE_NUMBER, message)
        #     return True
        
        # Process based on message type
        if num_media > 0:
            response = process_image_with_existing_logic(phone_number, media_urls, text_body)
        elif text_body:
            response = process_text_with_existing_logic(phone_number, text_body)
        else:
            response = "Please send an image or text message for analysis."
        
        # Send response
        send_whatsapp_message(twilio_client, from_number, TWILIO_PHONE_NUMBER, response)
        return True
        
    except Exception as e:
        logger.error(f"Error processing message: {e}")
        return False

def process_image_with_existing_logic(phone_number, media_urls, caption):
    """
    TODO: Migrate your handle_image_analysis logic here
    """
    # 1. Download image from Twilio URL
    # 2. Upload to S3
    # 3. Call your prediction model
    # 4. Store in database
    # 5. Return formatted response
    pass

def process_text_with_existing_logic(phone_number, text_content):
    """
    TODO: Migrate your handle_text_analysis logic here
    """
    # 1. Check if feedback or new content
    # 2. Process accordingly
    # 3. Store in database
    # 4. Return formatted response
    pass

# === PASTE YOUR EXTRACTED FUNCTIONS BELOW THIS LINE ===

'''
    
    with open('background-processor/processor_migrated.py', 'w') as f:
        f.write(template)
    
    print("\nüìù Created migration template at: background-processor/processor_migrated.py")

def create_requirements_merged():
    """Merge requirements from existing project"""
    print("\nüì¶ Merging requirements files...")
    
    existing_reqs = set()
    new_reqs = set()
    
    # Read existing requirements
    if os.path.exists('../requirements.txt'):
        with open('../requirements.txt', 'r') as f:
            existing_reqs = set(line.strip() for line in f if line.strip() and not line.startswith('#'))
    
    # Read new Lambda requirements
    with open('background-processor/requirements.txt', 'r') as f:
        new_reqs = set(line.strip() for line in f if line.strip() and not line.startswith('#'))
    
    # Merge
    all_reqs = existing_reqs.union(new_reqs)
    
    # Write merged requirements
    with open('background-processor/requirements_merged.txt', 'w') as f:
        f.write("# Merged requirements for Lambda processor\n")
        for req in sorted(all_reqs):
            f.write(f"{req}\n")
    
    print(f"‚úÖ Created merged requirements with {len(all_reqs)} packages")

def main():
    print("üöÄ Qila Lambda Migration Helper\n")
    
    # Extract functions
    functions = extract_processing_functions()
    
    # Create migration template
    create_migration_template()
    
    # Merge requirements
    create_requirements_merged()
    
    print("\nüìã Next steps:")
    print("1. Review background-processor/processor_migrated.py")
    print("2. Copy your processing logic into the template")
    print("3. Update imports and database connections")
    print("4. Test locally with test scripts")
    print("5. Deploy with SAM CLI")
    
    print("\nüí° Key changes to make:")
    print("- Replace Flask 'resp.message()' with return values")
    print("- Use environment variables instead of .env file")
    print("- Return success/failure boolean from processing functions")
    print("- Use Twilio REST API instead of TwiML for responses")

if __name__ == "__main__":
    main()
